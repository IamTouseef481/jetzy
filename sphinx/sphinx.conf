
#############################################################################
## indexer settings
#############################################################################
indexer
{
# memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
# optional, default is 128M, max is 2047M, recommended is 256M to 1024M
mem_limit		= 512M
}

#############################################################################
## searchd settings
#############################################################################
searchd
{
# [hostname:]port[:protocol], or /unix/socket/path to listen on
# known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
#
# multi-value, multiple listen points are allowed
# optional, defaults are 9312:sphinx and 9306:mysql41, as below
listen			= 9312
listen			= 9307:mysql41

# log file, searchd run info is logged here
# optional, default is 'searchd.log'
log			= /sphinx/log/searchd.log
binlog_path = /sphinx/data/

# query log file, all search queries are logged here
# optional, default is empty (do not log queries)
query_log		= /sphinx/log/query.log

# client read timeout, seconds
# optional, default is 5
read_timeout		= 5

# request timeout, seconds
# optional, default is 5 minutes
client_timeout		= 300

# maximum amount of children to fork (concurrent searches to run)
# optional, default is 0 (unlimited)
max_children		= 30

  max_matches = 1000000

# maximum amount of persistent connections from this master to each agent host
# optional, but necessary if you use agent_persistent. It is reasonable to set the value
# as max_children, or less on the agent's hosts.
persistent_connections_limit	= 30

# PID file, searchd process ID file name
# mandatory
pid_file		= /sphinx/log/searchd.pid

# seamless rotate, prevents rotate stalls if precaching huge datasets
# optional, default is 1
seamless_rotate		= 1

# whether to forcibly preopen all indexes on startup
# optional, default is 1 (preopen everything)
preopen_indexes		= 1

# whether to unlink .old index copies on succesful rotation.
# optional, default is 1 (do unlink)
unlink_old		= 1

# MVA updates pool size
# shared between all instances of searchd, disables attr flushes!
# optional, default size is 1M
mva_updates_pool	= 1M

# max allowed network packet size
# limits both query packets from clients, and responses from agents
# optional, default size is 8M
max_packet_size		= 8M

# max allowed per-query filter count
# optional, default is 256
max_filters		= 256

# max allowed per-filter values count
# optional, default is 4096
max_filter_values	= 4096

# max allowed per-batch query count (aka multi-query count)
# optional, default is 32
max_batch_queries	= 32

# multi-processing mode (MPM)
# known values are none, fork, prefork, and threads
# threads is required for RT backend to work
# optional, default is threads
workers			= threads # for RT to work
}

#############################################################################
## common settings
#############################################################################
common
{

}



########################################################################################################################
########################################################################################################################
## data source definition
########################################################################################################################
########################################################################################################################


#---------------------------------------------------
# Primary
#---------------------------------------------------
source primary_source__base
{
  type			= xmlpipe2
}

#---------------------------------------------------
# Delta
#---------------------------------------------------
source delta_source__base
{
  type			= xmlpipe2
}

########################################################################################################################
########################################################################################################################
## Index Definitions
########################################################################################################################
########################################################################################################################

#---------------------------------------------------
# Primary
#---------------------------------------------------
index index__base
{
# index type
# optional, default is 'plain'
# known values are 'plain', 'distributed', and 'rt' (see samples below)
type			= plain

# document attribute values (docinfo) storage mode
# optional, default is 'extern'
# known values are 'none', 'extern' and 'inline'
docinfo			= extern

# dictionary type, 'crc' or 'keywords'
# crc is faster to index when no substring/wildcards searches are needed
# crc with substrings might be faster to search but is much slower to index
# (because all substrings are pre-extracted as individual keywords)
# keywords is much faster to index with substrings, and index is much (3-10x) smaller
# keywords supports wildcards, crc does not, and never will
# optional, default is 'keywords'
dict			= keywords

# memory locking for cached data (.spa and .spi), to prevent swapping
# optional, default is 0 (do not mlock)
# requires searchd to be run from root
mlock			= 0

# a list of morphology preprocessors to apply
# optional, default is empty
#
# builtin preprocessors are 'none', 'stem_en', 'stem_ru', 'stem_enru',
# morphology		= stem_en, stem_ru, soundex
morphology		= stem_en

# minimum word length at which to enable stemming
# optional, default is 1 (stem everything)
min_stemming_len	= 3

# minimum indexed word length
# default is 1 (index everything)
min_word_len		= 3

# whether to strip HTML tags from incoming documents
# known values are 0 (do not strip) and 1 (do strip)
# optional, default is 0
html_strip		= 1

}


#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Hotel.Index : hotel
# Generated Index Definition
# =====================================================================
source primary_source__hotel : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary hotel
}

source delta_source__hotel : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta hotel
}

index primary_index__hotel : index__base
{
      source = primary_source__hotel
      path = /sphinx/data/primary_index__hotel
}
index delta_index__hotel : index__base
{
      source = delta_source__hotel
      path = /sphinx/data/delta_index__hotel
}

index rt_index__hotel
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__hotel

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = owner
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Hotel.Location.Index : hotel_location
# Generated Index Definition
# =====================================================================
source primary_source__hotel_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary hotel_location
}

source delta_source__hotel_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta hotel_location
}

index primary_index__hotel_location : index__base
{
      source = primary_source__hotel_location
      path = /sphinx/data/primary_index__hotel_location
}
index delta_index__hotel_location : index__base
{
      source = delta_source__hotel_location
      path = /sphinx/data/delta_index__hotel_location
}

index rt_index__hotel_location
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__hotel_location

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = hotel
      rt_attr_bigint = location
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Index : business
# Generated Index Definition
# =====================================================================
source primary_source__business : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary business
}

source delta_source__business : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta business
}

index primary_index__business : index__base
{
      source = primary_source__business
      path = /sphinx/data/primary_index__business
}
index delta_index__business : index__base
{
      source = delta_source__business
      path = /sphinx/data/delta_index__business
}

index rt_index__business
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__business

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = owner
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Location.Index : business_location
# Generated Index Definition
# =====================================================================
source primary_source__business_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary business_location
}

source delta_source__business_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta business_location
}

index primary_index__business_location : index__base
{
      source = primary_source__business_location
      path = /sphinx/data/primary_index__business_location
}
index delta_index__business_location : index__base
{
      source = delta_source__business_location
      path = /sphinx/data/delta_index__business_location
}

index rt_index__business_location
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__business_location

    rt_attr_bigint = attributes
      rt_attr_bigint = business
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = location
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Restaurant.Index : restaurant
# Generated Index Definition
# =====================================================================
source primary_source__restaurant : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary restaurant
}

source delta_source__restaurant : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta restaurant
}

index primary_index__restaurant : index__base
{
      source = primary_source__restaurant
      path = /sphinx/data/primary_index__restaurant
}
index delta_index__restaurant : index__base
{
      source = delta_source__restaurant
      path = /sphinx/data/delta_index__restaurant
}

index rt_index__restaurant
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__restaurant

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = owner
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Restaurant.Location.Index : restaurant_location
# Generated Index Definition
# =====================================================================
source primary_source__restaurant_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary restaurant_location
}

source delta_source__restaurant_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta restaurant_location
}

index primary_index__restaurant_location : index__base
{
      source = primary_source__restaurant_location
      path = /sphinx/data/primary_index__restaurant_location
}
index delta_index__restaurant_location : index__base
{
      source = delta_source__restaurant_location
      path = /sphinx/data/delta_index__restaurant_location
}

index rt_index__restaurant_location
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__restaurant_location

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = location
      rt_attr_bigint = restaurant
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Vendor.Index : vendor
# Generated Index Definition
# =====================================================================
source primary_source__vendor : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary vendor
}

source delta_source__vendor : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta vendor
}

index primary_index__vendor : index__base
{
      source = primary_source__vendor
      path = /sphinx/data/primary_index__vendor
}
index delta_index__vendor : index__base
{
      source = delta_source__vendor
      path = /sphinx/data/delta_index__vendor
}

index rt_index__vendor
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__vendor

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = owner
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Business.Vendor.Location.Index : vendor_location
# Generated Index Definition
# =====================================================================
source primary_source__vendor_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary vendor_location
}

source delta_source__vendor_location : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta vendor_location
}

index primary_index__vendor_location : index__base
{
      source = primary_source__vendor_location
      path = /sphinx/data/primary_index__vendor_location
}
index delta_index__vendor_location : index__base
{
      source = delta_source__vendor_location
      path = /sphinx/data/delta_index__vendor_location
}

index rt_index__vendor_location
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__vendor_location

    rt_attr_bigint = attributes
      rt_field = description_body
      rt_attr_uint = description_id
      rt_attr_timestamp = description_modified_on
      rt_field = description_title
      rt_attr_bigint = details
      rt_attr_bigint = location
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
      rt_attr_bigint = vendor
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Comment.Index : comment
# Generated Index Definition
# =====================================================================
source primary_source__comment : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary comment
}

source delta_source__comment : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta comment
}

index primary_index__comment : index__base
{
      source = primary_source__comment
      path = /sphinx/data/primary_index__comment
}
index delta_index__comment : index__base
{
      source = delta_source__comment
      path = /sphinx/data/delta_index__comment
}

index rt_index__comment
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__comment

    rt_attr_uint = comment_type
      rt_field = content_body
      rt_attr_timestamp = content_created_on
      rt_attr_uint = content_deleted
      rt_attr_timestamp = content_modified_on
      rt_attr_uint = geo_coordinates
      rt_attr_float = geo_latitude
      rt_attr_float = geo_longitude
      rt_attr_float = geo_radius
      rt_attr_uint = geo_zone
      rt_attr_uint = location
      rt_attr_uint = moderation_flag
      rt_attr_uint = moderation_resolution
      rt_attr_uint = moderation_status
      rt_attr_uint = parent_type
      rt_attr_bigint = parent_uid
      rt_attr_bigint = path_a11
      rt_attr_bigint = path_a12
      rt_attr_bigint = path_a21
      rt_attr_bigint = path_a22
      rt_attr_bigint = path_depth
      rt_attr_uint = status
      rt_attr_uint = subject_type
      rt_attr_bigint = subject_uid
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.Post.Index : post
# Generated Index Definition
# =====================================================================
source primary_source__post : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary post
}

source delta_source__post : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta post
}

index primary_index__post : index__base
{
      source = primary_source__post
      path = /sphinx/data/primary_index__post
}
index delta_index__post : index__base
{
      source = delta_source__post
      path = /sphinx/data/delta_index__post
}

index rt_index__post
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__post

    rt_field = content_body
      rt_attr_timestamp = content_created_on
      rt_attr_uint = content_deleted
      rt_attr_timestamp = content_modified_on
      rt_field = content_title
      rt_attr_uint = geo_coordinates
      rt_attr_float = geo_latitude
      rt_attr_float = geo_longitude
      rt_attr_float = geo_radius
      rt_attr_uint = geo_zone
      rt_attr_multi_64 = interests
      rt_attr_uint = location
      rt_attr_uint = media_type
      rt_attr_uint = moderation_flag
      rt_attr_uint = moderation_resolution
      rt_attr_uint = moderation_status
      rt_attr_uint = owner_type
      rt_attr_bigint = owner_uid
      rt_attr_uint = post_topic
      rt_attr_uint = post_type
      rt_attr_uint = status
      rt_attr_multi_64 = tags
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
      rt_attr_uint = visibility
}

#========[ GENERATED CODE BELOW. DO NOT EDIT BY HAND ]========

# =====================================================================
# Elixir.Jetzy.User.Index : user
# Generated Index Definition
# =====================================================================
source primary_source__user : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe primary user
}

source delta_source__user : primary_source__base
{
      xmlpipe_command = sphinx_xml_pipe delta user
}

index primary_index__user : index__base
{
      source = primary_source__user
      path = /sphinx/data/primary_index__user
}
index delta_index__user : index__base
{
      source = delta_source__user
      path = /sphinx/data/delta_index__user
}

index rt_index__user
{
      # @todo - make these settings in elixir indexing annotation
      type = rt
      dict = keywords
      morphology = stem_en
      min_stemming_len = 3
      min_word_len = 3
      html_strip = 1
      path = /sphinx/data/rt_index__user

    rt_field = about_body
      rt_attr_uint = about_id
      rt_attr_timestamp = about_modified_on
      rt_field = about_title
      rt_field = bio_body
      rt_attr_uint = bio_id
      rt_attr_timestamp = bio_modified_on
      rt_field = bio_title
      rt_attr_timestamp = date_of_birth
      rt_attr_uint = gender
      rt_attr_uint = moderation_flag
      rt_attr_uint = moderation_resolution
      rt_attr_uint = moderation_status
      rt_field = name_full
      rt_field = name_last
      rt_attr_uint = origin
      rt_field = panic_body
      rt_attr_uint = panic_id
      rt_attr_timestamp = panic_modified_on
      rt_field = panic_title
      rt_attr_timestamp = time_stamp_created_on
      rt_attr_uint = time_stamp_deleted
      rt_attr_timestamp = time_stamp_deleted_on
      rt_attr_timestamp = time_stamp_modified_on
      rt_attr_uint = verified
}

