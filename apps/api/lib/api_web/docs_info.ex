defmodule ApiWeb.DocsInfo do
  @moduledoc """

  """

  defmacro __using__(_options \\ []) do
    quote do
      def swagger_info do
        import Ecto.Query
        Mix.Task.run "app.start", []
        %{
          info: %{
            version: "1.0",
            title: "Jetzy REST Api",
            description:
              ~s(This is detailed api documentation for all of the client side apps to connect with our `black-boxed-server`. ) <>
              ~s(Black boxed server means you really don't need to worry about what is coded at server side and how things are being implemented. ) <>
              ~s(Even you don't need to know what kind of tech stack is being used at backend. This `REST Api` is just like thousands of other APIs available over the internet. ) <>
              ~s(If you want to make sure you really understand REST Api concept please spare 12 minutes to [watch this youtube video](https://youtu.be/qVTAB8Z2VmA\).\n\n) <>
              ~s(**Important:** There are several things you need to understand before start reading / using this documentation:\n\n) <>
              ~s(1- All requests and responses are sent / received as JSON format. ) <>
              ~s(If you do not understand JSON format please take a minute to [watch this youtube video](https://youtu.be/wI1CWzNtE-M\).\n\n) <>
              ~s(2- You don't need to use ~~postman~~ for testing any endpoint, you can do everything here. ) <>
              ~s(The Greatest [Swagger Specifications](https://swagger.io/specification/\) is being used to prepare api documentation and [Swagger UI](https://swagger.io/swagger-ui/\) to prepare this interface. ) <>
              ~s(We suggest you to understand how to use this documentation to get maximum benefit out of it, please [watch this youtube video](https://youtu.be/Nymyc8-WeHM\).\n\n) <>
              ~s(4- Some endpoints are secured, you can see lock icon in front of them. You cannot access any endpoint without login / JWT token. ) <>
              ~s(To Acquire JWT token, first of all hit `/sign_in` endpoint, pass your login details and acquire the token. ) <>
              ~s(Once server returns token, copy it to clipboard and paste to authorization modal by clicking on `Authorize` button on the right side above the endpoints. ) <>
              ~s(Once you have entered the token, all lock icons will get bold to notify that you can hit them now.\n\n) <>
              ~s(**Note:** Api documentation is not completed yet, so you may find some parts missing here but most of your need will be fulfilled. You can contact API developer below anytime.\n\n),
            contact: %{
              name: "Api Developer: Hammad",
              email: "hammadciit@gmail.com"
            },
          },
          schemes: ["http", "https", "ws", "wss"],
          basePath: "/api",
          consumes: ["application/json"],
          produces: ["application/json"],
          securityDefinitions: %{
            Bearer: %{
              type: "apiKey",
              name: "Authorization",
              in: "header",
              description:
                ~s(For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.\n\n) <>
                ~s(A valid JWT token is generated by the API and returned as answer of a call to the route **/sign_in** giving a valid app, login and password.\n\n\n) <>
                ~s(The following syntax must be used in the 'Authorization' header :\n\n**Authorization:** Bearer {{JWT Token}} - In the below field Just Pass "`Bearer {{JWT Token}}`".),
            }
          }
        }
      end
    end
  end
end
