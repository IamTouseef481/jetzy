import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.


get_env = fn(var, env, required) ->
  cond do
    v = System.get_env(var) -> v
    required == true || required == :required -> raise("#{env.file}:#{env.line}  Config Error - User must set #{var}=[...] environment variable")
    required == :silent -> nil
    :else ->
      IO.puts "#{env.file}:#{env.line} Config Error"
      nil
  end
end

protocol_options = [
  request_timeout: 100_000_000,
  shutdown_timeout: 100_000_000,
  idle_timeout: 100_000_000,
  linger_timeout: 100_000_000,
]

config :api, ApiWeb.Endpoint,
       http: [port: get_env.("API_PORT", __ENV__, :required), protocol_options: protocol_options],
       debug_errors: true,
       code_reloader: false,
       check_origin: false,
       watchers: []

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

config :logger,
       truncate: :infinity,
       log_level: :warn


# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 250

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime


#-------------------------------------------------------------------------------
# Mnesia & MnesiaVersioning
#-------------------------------------------------------------------------------
config :noizu_mnesia_versioning,
       environment: :test
# Override Mnesia Folder (For Dev Sandbox)
mnesia_dir = (m = get_env.("JETZY_TEST_OVERRIDE_MNESIA_DIR", __ENV__, :silent)) && String.to_charlist(m) || String.to_charlist("//mnt/mnesia/jetzy-test/")
config :mnesia,
       dir: mnesia_dir

import_config "one_box.exs"